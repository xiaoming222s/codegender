<%-- 
Name:
Author: 
Description: 
--%>

<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="../BaseTemplate.cs" Inherits="BaseTemplate"%>


<%@ Assembly Name="SchemaExplorer"%>
<%@ Import Namespace="SchemaExplorer"%>


package <%=classFrefix %>.controller;


<%
    string dic="";
    foreach(ColumnSchema col in Table.Columns){
%>
<% 
        if(col.Description.IndexOf(":dic:")>-1){
            dic+=string.Format(",\"{0}\"",col.Description.Split(':')[2]);
        }
    }
%>

import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import <%=CommonPrefix %>.exception.UnityRuntimeException;
import org.apache.commons.lang3.StringUtils;
import com.alibaba.fastjson.JSON;
import <%=CommonPrefix %>.base.controller.BaseWebController;
import <%=CommonPrefix %>.pojos.SystemResponse;
import <%=CommonPrefix %>.ui.excel.ExcelEntity;
import <%=CommonPrefix %>.ui.excel.ExportEntity;
import <%=CommonPrefix %>.ui.PageElementGrid;
import <%=CommonPrefix %>.ui.SearchElementGrid;
import <%=CommonPrefix %>.ui.tree.zTree;
import <%=CommonPrefix %>.ui.tree.zTreeStructure;
import <%=CommonPrefix %>.ui.SearchCondition;
import <%=CommonPrefix %>.util.ConvertUtil;
import <%=CommonPrefix %>.util.DateUtils;
import <%=CommonPrefix %>.util.JsonUtil;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import reactor.core.publisher.Mono;
import com.baomidou.mybatisplus.core.metadata.IPage;
import <%=CommonPrefix %>.constants.ConstString;

import java.util.Date;
import java.util.Map;
import java.util.List;
import java.util.Arrays;
import <%=CommonPrefix %>.enums.FlagEnum;
import javax.servlet.http.HttpServletResponse;


import <%=classFrefix %>.client.SystemClient;
import <%=classFrefix %>.client.RbacClient;
import <%=classFrefix %>.service.<%=getReplaceName(getName())%>ServiceImpl;
import <%=classFrefix %>.entity.<%=getName() %>;
import <%=classFrefix %>.enums.*;

    <%if(!string.IsNullOrEmpty(dic)) {%>
import <%=CommonPrefix %>.pojos.Dic;
import <%=CommonPrefix %>.base.ContextHolder;
    <%} %>






/**
 * <%=Table.Description %>
 * @author <%=Author %>
 * 生成时间 <%=System.DateTime.Now.ToString("yyyy'-'MM'-'dd HH:mm:ss") %>
 */
@Controller
@RequestMapping("/<%=getReplaceName(getName()).ToLower() %>")
public class <%=getReplaceName(getName())%>Controller extends BaseWebController {
    @Autowired
    <%=getName() %>ServiceImpl service;
    
    @Autowired
    RbacClient rbacClient;

    @Autowired
    SystemClient systemClient;

    /**
     * 模块入口
     * @param model MVC模型
     * @param iframe 用于刷新或调用iframe内容
     * @return 返回视图
     */
    @RequestMapping("/view/moduleEntrance/{iframe}")
    public String moduleEntrance(Model model,@PathVariable("iframe") String iframe) {
        model.addAttribute("iframe", iframe);
        model.addAttribute("button", JSON.toJSONString(rbacClient.getMenuButton(iframe)));
        return "<%=getReplaceName(getName())%>List";
    }

<%
if(Table.Columns.Exists(o=>o.Name=="gradation_code")){
%>
    /**
     * 添加或修改表达入口
     * @param model MVC模型
     * @param iframe 用于刷新或调用iframe内容
     * @param id <%=Table.Description %>id
     * @param idParent 父id
     * @param gradationCode 父集次编码
     * @return 返回视图
     */
    @RequestMapping(value = "/view/editEntrance/{iframe}")
    public String editEntrance(Model model,@PathVariable("iframe") String iframe,String id,String idParent,String gradationCode) {
        model.addAttribute("iframe", iframe);
        model.addAttribute("id", id);
        model.addAttribute("idParent", StringUtils.isEmpty(idParent)?"":idParent);
        model.addAttribute("gradationCode", StringUtils.isEmpty(gradationCode)?"":gradationCode);
        if(id!=null){
            <%=getName() %> entity = service.getById(id);
            if(entity==null) model.addAttribute("entity", "{}");
            else model.addAttribute("entity", JSON.toJSONString(convert2Map(entity)));
        }
        else{
            model.addAttribute("entity", "{}");
        }
        return "<%=getReplaceName(getName())%>Edit";
    }
    
     /**
     * 获取树数据
     * @param search 统一查询条件
     * @return
     */
    @PostMapping("/tree")
    @ResponseBody
    public Mono<ResponseEntity<SystemResponse<Object>>> tree(@RequestBody SearchElementGrid search) {

        LambdaQueryWrapper<<%=getName() %>> ew = wrapper(search);
        List<<%=getName() %>> list = service.list(ew);
        zTreeStructure structure = zTreeStructure.newInstance()
                .idField("id")
                .textField("name")
                .parentField("idParent")
                .kidField("gradationCode,ilevel")
                .build();
        return success(zTree.getTree(list,structure));

    }
    
         /**
     * 添加或修改
     * @param entity <%=Table.Description %>实体
     * @return
     */
    @PostMapping("/save")
    @ResponseBody
    public Mono<ResponseEntity<SystemResponse<Object>>>  save(@RequestBody <%=getName() %> entity) {
    
         if(entity.getId()==null){
            LambdaQueryWrapper<<%=getName() %>> ew = new LambdaQueryWrapper<<%=getName() %>>();
            String gradationCode = "";
            if(entity.getIdParent()==null){
                ew.isNull(<%=getName() %>::getIdParent);
            }
            else {
                ew.eq(<%=getName() %>::getIdParent,entity.getIdParent());
                gradationCode = entity.getGradationCode();
            }
            int max = service.count2(ew) + 1;
            entity.setGradationCode(gradationCode+ConstString.SEPARATOR_POINT+max);
            entity.setLevel(entity.getGradationCode().split(ConstString.SPLIT_POINT).length);
        }
        
        service.saveOrUpdate(entity);
        return success(null);
    }
<%
} else{
%>
    /**
     * 添加或修改表达入口
     * @param model MVC模型
     * @param iframe 用于刷新或调用iframe内容
     * @param id <%=Table.Description %>id
     * @return 返回视图
     */
    @RequestMapping(value = "/view/editEntrance/{iframe}")
    public String editEntrance(Model model,@PathVariable("iframe") String iframe,String id) {
        model.addAttribute("iframe", iframe);
        model.addAttribute("id", id);
        if(id!=null){
            <%=getName() %> entity = service.getById(id);
            if(entity==null) model.addAttribute("entity", "{}");
            else model.addAttribute("entity", JSON.toJSONString(convert2Map(entity)));
        }
        else{
            model.addAttribute("entity", "{}");
        }
        return "<%=getReplaceName(getName())%>Edit";
    }
    
     /**
     * 获取一页数据
     * @param search 统一查询条件
     * @return
     */
    @PostMapping("/listByPage")
    @ResponseBody
    public Mono<ResponseEntity<SystemResponse<Object>>> listByPage(@RequestBody SearchElementGrid search) {
    
        LambdaQueryWrapper<<%=getName() %>> ew = wrapper(search);

        IPage p = service.page(search.getPageable(), ew);
        PageElementGrid result = PageElementGrid.<Map<String,Object>>newInstance()
                .total(p.getTotal())
                .items(convert2List(p.getRecords())).build();
        return success(result);

    }
    
         /**
     * 添加或修改
     * @param entity <%=Table.Description %>实体
     * @return
     */
    @PostMapping("/save")
    @ResponseBody
    public Mono<ResponseEntity<SystemResponse<Object>>>  save(@RequestBody <%=getName() %> entity) {
        
        service.saveOrUpdate(entity);
        return success(null);
    }
    
    @RequestMapping({"/export/excel"})
    public void exportExcel(HttpServletResponse res,String cond) {
        String fileName="<%=Table.Description %>";
        ExportEntity<<%=getName() %>> excel =  ExcelEntity.exportEntity(res);

        try {
            SearchElementGrid search = new SearchElementGrid();
            search.setCond(JSON.parseObject(cond, SearchCondition.class));
            LambdaQueryWrapper<<%=getName() %>> ew = wrapper(search);
            List<<%=getName() %>> list = service.list(ew);
     
            excel.<<%=getName() %>>sheet()
            <%foreach(ColumnSchema col in Table.Columns){ %>
                <% if(col.Name!="gmt_create" && col.Name!="is_deleted" && col.Name!="i_sort"
                     && col.Name!="creator"){ %>
                    <% string[] v = col.Description.Split(':'); %>
                    <% if(v.Length>1){%>
                        <%switch(v[1]){ %>
                            <%case "status":case "flag":case "dic": %>
                .column("<%=_ToUpper(col.Name)%>Title","<%=v[0] %>")
                            <%break; %>
                        <%} %>
                    <%} else {%>
                .column(<%=getName() %>::get<%=fieldToName(col.Name)%>,"<%=col.Description %>")
                    <%} %>
             <% }} %>
                .entities(convert2List(list))
                .name(fileName)
            .export(fileName);
        }
        catch (Exception ex){
            excel.exportError(fileName,ex);
        }
    }
<%}%>

    
     /**
     * 获取数据
     * @param search 统一查询条件
     * @return
     */
    @PostMapping("/list")
    @ResponseBody
    public Mono<ResponseEntity<SystemResponse<Object>>> list(@RequestBody SearchElementGrid search) {
    
        LambdaQueryWrapper<<%=getName() %>> ew = wrapper(search);

        List list = service.list(ew);
        PageElementGrid result = PageElementGrid.<Map<String,Object>>newInstance()
                .total(Long.valueOf(list.size()))
                .items(convert2List(list)).build();
        return success(result);

    }

    /**
     * 查询条件转换
     * @param search 统一查询对象
     * @return
     */
    private LambdaQueryWrapper<<%=getName() %>> wrapper(SearchElementGrid search){
        LambdaQueryWrapper<<%=getName() %>> ew = null;
        if(search!=null){
            if(search.getCond()!=null){
        <%foreach(ColumnSchema col in Table.Columns){ %> 
            <%if(col.Description.IndexOf(':')>-1){
                String[] _t = col.Description.Split(':');
                if(_t[1]=="timeStamp"){
        %>
                search.getCond().findRule(<%=getName() %>::get<%=fieldToName(col.Name)%>).forEach(r->{
                   r.setData(DateUtils.parseDate(r.getData()).getTime());
                });
        <%}}}%> 
            }
            ew = search.toEntityLambdaWrapper(<%=getName() %>.class);

        }
        else{
            ew = new LambdaQueryWrapper<<%=getName() %>>();
        }

        ew.orderBy(true, false,<%=getName() %>::getSort);
        
        return ew;
    }
    
    
    <%if(!string.IsNullOrEmpty(dic)) {%>
     /**
     * 获取所用的字典
     * @return
     */
    private List<Dic> getDics(){
        if(!ContextHolder.containsKey(ConstString.DIC_KEY)){
            ContextHolder.set(ConstString.DIC_KEY,systemClient.getDic(Arrays.asList(<%=dic.Substring(1)%>)));
        }
        return ContextHolder.get(ConstString.DIC_KEY);
    }
    <%} %>
    
     /**
     * 将实体列表 转换为List Map
     * @param list 实体列表
     * @return
     */
    private List<Map<String, Object>> convert2List(List<<%=getName() %>> list){
       
        return JsonUtil.<<%=getName() %>>ObjectToList(list,
                (m, entity) -> {
                    adapterField(m, entity);
                }
                <%foreach(ColumnSchema col in Table.Columns){ if(col.DataType!=DbType.DateTime && col.DataType!=DbType.Date && col.Name!="creator" && col.Name!="editor" && col.Name!="isDeleted" && col.Description.IndexOf(":timeStamp:")==-1 && col.Description.IndexOf(":dic:")==-1 && col.Description.IndexOf(":img:")==-1 && col.Description.IndexOf(":file:")==-1 && col.Description.IndexOf(":flag:")==-1){ %>,<%=getName() %>::get<%=fieldToName(col.Name)%><%}}%>
        );
    }
    
     /**
     * 将实体 转换为 Map
     * @param ent 实体
     * @return
     */
    private Map<String, Object> convert2Map(<%=getName() %> ent){
        return JsonUtil.<<%=getName() %>>ObjectToMap(ent,
                (m, entity) -> {
                    adapterField(m,entity);
                }
                <%foreach(ColumnSchema col in Table.Columns){ if(col.DataType!=DbType.DateTime && col.DataType!=DbType.Date && col.Name!="creator" && col.Name!="editor" && col.Name!="isDeleted" && col.Description.IndexOf(":timeStamp:")==-1 && col.Description.IndexOf(":dic:")==-1 && col.Description.IndexOf(":img:")==-1 && col.Description.IndexOf(":file:")==-1){ %>,<%=getName() %>::get<%=fieldToName(col.Name)%><%}}%>
        );
    }
    
    /**
     * 字段适配
     * @param m 适配的结果
     * @param entity 需要适配的实体
     */
    private void adapterField(Map<String, Object> m,<%=getName() %> entity){
        if(!StringUtils.isEmpty(entity.getCreator())) {
            if(entity.getCreator().indexOf(ConstString.SEPARATOR_POINT)>-1) {
                m.put("creator", entity.getCreator().split(ConstString.SPLIT_POINT)[1]);
            }
            else {
                m.put("creator", entity.getCreator());
            }
        }
        if(!StringUtils.isEmpty(entity.getEditor())) {
            if(entity.getEditor().indexOf(ConstString.SEPARATOR_POINT)>-1) {
                m.put("editor", entity.getEditor().split(ConstString.SPLIT_POINT)[1]);
            }
            else {
                m.put("editor", entity.getEditor());
            }
        }
        
        <%foreach(ColumnSchema col in Table.Columns){ %>
        <%if(col.Name == "is_deleted"){ continue; }%>
        <%if(col.DataType==DbType.Date){%>
        if(entity.get<%=fieldToName(col.Name)%>()!=null) m.put("<%=_ToUpper(col.Name)%>", DateUtils.formatDate( entity.get<%=fieldToName(col.Name)%>(),"yyyy'-'MM'-'dd"));
            <%}%> 
            <%if(col.DataType==DbType.DateTime){%>
        if(entity.get<%=fieldToName(col.Name)%>()!=null) m.put("<%=_ToUpper(col.Name)%>", DateUtils.formatDate( entity.get<%=fieldToName(col.Name)%>(),"yyyy'-'MM'-'dd HH:mm:ss"));
        <%} if(col.Description.IndexOf(':')>-1){
                String[] _t = col.Description.Split(':');
                if(_t[1]=="timeStamp"){%>
        m.put("<%=_ToUpper(col.Name)%>", DateUtils.timeStamp2Date(entity.get<%=fieldToName(col.Name)%>()));
                <%} else if(_t[1]=="status"){%>
        if(entity.get<%=fieldToName(col.Name)%>()!=null) { 
            m.put("<%=_ToUpper(col.Name)%>Title", <%=fieldToName(col.Name) %>Enum.of(entity.get<%=fieldToName(col.Name)%>()).getName());
        }
                <%} else if(_t[1]=="flag"){%>
        if(entity.get<%=fieldToName(col.Name)%>()!=null) {
            m.put("<%=_ToUpper(col.Name)%>Title", FlagEnum.of(entity.get<%=fieldToName(col.Name)%>()).getName());
        }
        <%} else if(_t[1]=="dic"){%>
        m.put("<%=_ToUpper(col.Name)%>Title", getDics().stream().filter(o->o.getDic().equals("<%=_t[2]%>") && o.getId().toString().equals(entity.get<%=fieldToName(col.Name)%>()))
                                        .map(o->o.getName()).findFirst().orElse(null));

        <%}}}%> 
    }
    
    /**
     * 批量删除
     * @param ids id列表用英文逗号分隔
     * @return
     */
    @DeleteMapping("/del/{ids}")
    public Mono<ResponseEntity<SystemResponse<Object>>>  del(@PathVariable("ids") String ids) {
        service.removeByIds(ConvertUtil.arrString2Long(ids.split(ConstString.SPLIT_COMMA)));
        return success(null);
    }


    /**
     * 更改排序
     * @param id
     * @param up 1 下降 0 上升
     * @return
     */
    @PostMapping("/changeOrder/{id}/{up}")
    public Mono<ResponseEntity<SystemResponse<Object>>> changeOrder(@PathVariable Integer id,@PathVariable Integer up){
        <%=getName() %> entity = service.getById(id);
        Long sort = entity.getSort();
        LambdaQueryWrapper<<%=getName() %>> wrapper = new LambdaQueryWrapper();

        String msg ="";
        if(up==1) {
            wrapper.lt(<%=getName() %>::getSort, sort);
            msg ="已经是最后一条数据";
            wrapper.orderByDesc(<%=getName() %>::getSort);
        }
        else {
            wrapper.gt(<%=getName() %>::getSort, sort);
            msg ="已经是第一条数据";
            wrapper.orderByAsc(<%=getName() %>::getSort);
        }


        <%=getName() %> entity1 = service.getOne(wrapper);
        if(entity1==null) throw new UnityRuntimeException(msg);

        entity.setSort(entity1.getSort());

        <%=getName() %> entityA = new <%=getName() %>();
        entityA.setId(entity.getId());
        entityA.setSort(entity1.getSort());
        service.updateById(entityA);

        <%=getName() %> entityB = new <%=getName() %>();
        entityB.setId(entity1.getId());
        entityB.setSort(sort);
        service.updateById(entityB);

        return success("移动成功");
    }
}

