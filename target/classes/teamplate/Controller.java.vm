package ${package}.${moduleName}.controller;
import  ${package}.${moduleName}.common.base.PageElementGrid;
import ${package}.${moduleName}.entity.${className};
import ${package}.${moduleName}.service.${className}ServiceImpl;
import ${package}.${moduleName}.common.base.controller.BaseWebController;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import ${package}.${moduleName}.common.constants.ConstString;
import ${package}.${moduleName}.common.pojos.SystemResponse;
import ${package}.${moduleName}.common.util.ConvertUtil;
import ${package}.${moduleName}.common.util.JsonUtil;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import reactor.core.publisher.Mono;
import java.util.List;
import java.util.Map;
/**
 * ${comments}
 *
 * @author ${author}
 * @date ${datetime}
 */
@RestController
@RequestMapping("${classname}")
public class ${className}Controller extends BaseWebController{
    @Autowired
    private ${className}ServiceImpl service;



    /**
     * 保存和修改
     */
    @PostMapping("/save")
    @ResponseBody
    public Mono<ResponseEntity<SystemResponse<Object>>>  save(@RequestBody ${className} entity) {
        service.saveOrUpdate(entity);
        return success();
    }

    /**
     * 列表
     */
    @RequestMapping("/list")
    @ResponseBody
    public Mono<ResponseEntity<SystemResponse<Object>>> list(@RequestBody ${className} search) {
        LambdaQueryWrapper<${className} > ew = new LambdaQueryWrapper(search);;
        List list = service.list(ew);
        PageElementGrid result = PageElementGrid.<Map<String,Object>>newInstance()
                .total(Long.valueOf(list.size()))
                .items(convert2List(list)).build();
        return success(result);

    }

    /**
        * 将实体列表 转换为List Map
        * @param list 实体列表
        * @return
        */
    private List<Map<String, Object>> convert2List(List<${className}> list){

        return JsonUtil.<${className}>ObjectToList(list,
                (m, entity) -> {
                    adapterField(m, entity);
                }#foreach ($column in $columns),${className}::get$column.attrName ##
        #end );
    }

    /**
    * 将实体 转换为 Map
    * @param ent 实体
    * @return
    */
    private Map<String, Object> convert2Map(${className} ent){
        return JsonUtil.<${className}>ObjectToMap(ent,
                (m, entity) -> {
                    adapterField(m,entity);
                }#foreach ($column in $columns),${className}::get$column.attrName ##
        #end );
    }

    /**
        * 字段适配
        * @param m 适配的结果
        * @param entity 需要适配的实体
        */
    private void adapterField(Map<String, Object> m,${className} entity){
        if(!StringUtils.isEmpty(entity.getCreator())) {
            if(entity.getCreator().indexOf(ConstString.SEPARATOR_POINT)>-1) {
                m.put("creator", entity.getCreator().split(ConstString.SPLIT_POINT)[1]);
            }
            else {
                m.put("creator", entity.getCreator());
            }
        }
        if(!StringUtils.isEmpty(entity.getEditor())) {
            if(entity.getEditor().indexOf(ConstString.SEPARATOR_POINT)>-1) {
                m.put("editor", entity.getEditor().split(ConstString.SPLIT_POINT)[1]);
            }
            else {
                m.put("editor", entity.getEditor());
            }
        }
    #foreach ($column in $columns)
        #if($column.dataType =="date")
         if(entity.get$column.attrName()!=null){
          m.put("$column.attrName", DateUtils.formatDate(entity.get$column.attrName(),"yyyy'-'MM'-'dd HH:mm:ss"));
         }
        #end
    #end

    }




    /**
        * 批量删除
        * @param ids id列表用英文逗号分隔
        * @return
        */
    @DeleteMapping("/del/{ids}")
    public Mono<ResponseEntity<SystemResponse<Object>>>  del(@PathVariable("ids") String ids) {
        service.removeByIds(ConvertUtil.arrString2Long(ids.split(ConstString.SPLIT_COMMA)));
        return success();
    }





}
